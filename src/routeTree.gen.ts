/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const AboutLazyRouteImport = createFileRoute('/about')()
const IndexLazyRouteImport = createFileRoute('/')()
const PreviousPortoLazyRouteImport = createFileRoute('/previous/porto')()
const PreviousEindhovenLazyRouteImport = createFileRoute(
  '/previous/eindhoven',
)()
const PreviousBordeauxLazyRouteImport = createFileRoute('/previous/bordeaux')()

const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const PreviousPortoLazyRoute = PreviousPortoLazyRouteImport.update({
  id: '/previous/porto',
  path: '/previous/porto',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/previous/porto.lazy').then((d) => d.Route),
)
const PreviousEindhovenLazyRoute = PreviousEindhovenLazyRouteImport.update({
  id: '/previous/eindhoven',
  path: '/previous/eindhoven',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/previous/eindhoven.lazy').then((d) => d.Route),
)
const PreviousBordeauxLazyRoute = PreviousBordeauxLazyRouteImport.update({
  id: '/previous/bordeaux',
  path: '/previous/bordeaux',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/previous/bordeaux.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/previous/bordeaux': typeof PreviousBordeauxLazyRoute
  '/previous/eindhoven': typeof PreviousEindhovenLazyRoute
  '/previous/porto': typeof PreviousPortoLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/previous/bordeaux': typeof PreviousBordeauxLazyRoute
  '/previous/eindhoven': typeof PreviousEindhovenLazyRoute
  '/previous/porto': typeof PreviousPortoLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/previous/bordeaux': typeof PreviousBordeauxLazyRoute
  '/previous/eindhoven': typeof PreviousEindhovenLazyRoute
  '/previous/porto': typeof PreviousPortoLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/previous/bordeaux'
    | '/previous/eindhoven'
    | '/previous/porto'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/previous/bordeaux'
    | '/previous/eindhoven'
    | '/previous/porto'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/previous/bordeaux'
    | '/previous/eindhoven'
    | '/previous/porto'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  PreviousBordeauxLazyRoute: typeof PreviousBordeauxLazyRoute
  PreviousEindhovenLazyRoute: typeof PreviousEindhovenLazyRoute
  PreviousPortoLazyRoute: typeof PreviousPortoLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/previous/porto': {
      id: '/previous/porto'
      path: '/previous/porto'
      fullPath: '/previous/porto'
      preLoaderRoute: typeof PreviousPortoLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/previous/eindhoven': {
      id: '/previous/eindhoven'
      path: '/previous/eindhoven'
      fullPath: '/previous/eindhoven'
      preLoaderRoute: typeof PreviousEindhovenLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/previous/bordeaux': {
      id: '/previous/bordeaux'
      path: '/previous/bordeaux'
      fullPath: '/previous/bordeaux'
      preLoaderRoute: typeof PreviousBordeauxLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  PreviousBordeauxLazyRoute: PreviousBordeauxLazyRoute,
  PreviousEindhovenLazyRoute: PreviousEindhovenLazyRoute,
  PreviousPortoLazyRoute: PreviousPortoLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
